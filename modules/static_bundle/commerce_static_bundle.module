<?php

/**
 * @file
 * Contains commerce_static_bundle.module..
 */
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\CurrentRouteMatch;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Render\Element;
use Drupal\commerce_product\Entity\ProductType;

/**
 * Implements hook_help().
 */
function commerce_static_bundle_help($route_name, CurrentRouteMatch $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_static_bundle module.
    case 'help.page.commerce_static_bundle':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a static product bundle') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function commerce_static_bundle_theme() {
  $theme = [];
  $theme['commerce_static_bundle'] = array(
    'render element' => 'elements',
    'file'           => 'commerce_static_bundle.page.inc',
    'template'       => 'commerce_static_bundle',
  );
  $theme['commerce_static_bundle_content_add_list'] = [
    'render element' => 'content',
    'variables'      => ['content' => NULL],
    'file'           => 'commerce_static_bundle.page.inc',
  ];

  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_static_bundle_theme_suggestions_static_bundle(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#commerce_static_bundle'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'commerce_static_bundle__' . $sanitized_view_mode;
  $suggestions[] = 'commerce_static_bundle__' . $entity->bundle();
  $suggestions[] = 'commerce_static_bundle__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'commerce_static_bundle__' . $entity->id();
  $suggestions[] = 'commerce_static_bundle__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_static_bundle_theme_suggestions_static_bundle_item(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#commerce_static_bundle_item'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'commerce_static_bundle_item__' . $sanitized_view_mode;
  $suggestions[] = 'commerce_static_bundle_item__' . $entity->bundle();
  $suggestions[] = 'commerce_static_bundle_item__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'commerce_static_bundle_item__' . $entity->id();
  $suggestions[] = 'commerce_static_bundle_item__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Adds the entity reference field to a bundle item.
 *
 * Variations can't be a base field because the
 * it requires a entity type to be set. We would loose
 * the possibility to reference each Entity that implements
 * PurchasableEntityInterface. Instead, the fiels
 * is created as a configurable field for each bundle item type.
 *
 * @param $bundle_item_type
 *
 * @ToDo We may have to adjust the static_bundle_forms
 * @see commerce_product_add_stores_field()
 */
function commerce_static_bundle_add_purchasable_entity_reference_field($bundle_item_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_static_bundle', 'purchasable_entity');
  $field = FieldConfig::loadByName('commerce_static_bundle', $bundle_item_type->Id(), 'purchasable_entity');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name'   => 'purchasable_entity',
      'entity_type'  => 'commerce_static_bundle_item',
      'type'         => 'entity_reference',
      'cardinality'  => 1,
      'settings' => [
        'target_type' => 'commerce_product_variation',
      ],
      'locked'       => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle'        => $bundle_item_type->id(),
      'label'         => 'Purchasable Entity Reference',
      'required'      => TRUE,
      'settings'      => [
        'handler'          => 'default',
        'handler_settings' => [],
      ],
      'translatable'  => FALSE,
    ]);
    $field->save();

  }

  /**
   * Adds the entity reference field to a bundle item.
   *
   * Variations can't be a base field because the
   * it requires a entity type to be set. We would loose
   * the possibility to reference each Entity that implements
   * PurchasableEntityInterface. Instead, the fiels
   * is created as a configurable field for each bundle item type.
   *
   * @param $bundle_item_type
   *
   * @ToDo We may have to adjust the static_bundle_forms
   * @see commerce_product_add_stores_field()
   */
  function commerce_static_bundle_add_bundle_items_reference_field($bundle_type) {
    $field_storage = FieldStorageConfig::loadByName('commerce_static_bundle', 'bundle_items');
    $field = FieldConfig::loadByName('commerce_static_bundle', $bundle_type->Id(), 'bundle_items');
    if (empty($field_storage)) {
      $field_storage = FieldStorageConfig::create([
        'field_name'   => 'bundle_items',
        'entity_type'  => 'commerce_static_bundle',
        'type'         => 'entity_reference',
        'cardinality'  => FieldStorageConfig::CARDINALITY_UNLIMITED,
        'settings' => [
          'target_type' => 'commerce_static_bundle_item',
        ],
        'locked'       => TRUE,
        'translatable' => FALSE,
      ]);
      $field_storage->save();
    }
    if (empty($field)) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle'        => $bundle_type->id(),
        'label'         => 'Static Bundle Items',
        'required'      => TRUE,
        'settings'      => [
          'handler'          => 'default',
          'handler_settings' => [],
        ],
        'translatable'  => FALSE,
      ]);
      $field->save();
    }
  }

}
